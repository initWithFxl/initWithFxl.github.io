---
layout: post
title: Rumtime - 运行时
tags: 能工巧匠集
date: 2016-03-28 03:31:08.000000000 +09:00
---
### 1.什么是运行时?
```
1> 运行时是一套纯C语言的API(纯C语言库)

2> 编译器最终都会讲OC代码 转化 为运行时代码
* clang -rewrite-objc xxx.m

3> 利用运行时,可以做很多底层的操作,比如
* 动态添加对象的成员变量和成员方法
* 动态交换两个方法的实现
* 获得某个类的所有成员方法,所有成员变量
``` 

### 2.如何应用运行时?
```
1> 将某些OC代码转为运行时代码:探究底层,比如block的实现原理
2> 拦截系统自带的方法调用,比如拦截imageNamed:,viewDidLoad,alloc等
3> 实现字典和模型的自动转换
4> 能实现分类增加属性(每个对象的属性互不干扰)
5>实现NSCoding属性的自动归档和自动解档
```

### 3.运行时常用的函数

```
1> <objc/runtime.h> 
* Method class_getClassMethod(Class cls, SEL name)
获得某个类的类方法

* Method class_getInstanceMethod(Class cls, SEL name)
获得某个类的对象方法

* void method_exchangeImplementations(Method m1, Method m2)
交换两个方法的实现

* void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)
将值value跟对象object关联起来(将值value存储到对象object中)
参数key:将来可以通过key取出这个存储的值(一般为char类型)
参数policy:存储策略(assign,copy,retain)

* id objc_getAssociatedObject(id object, const void *key)
利用参数key将对象object中存储的值取出来

* Ivar *class_copyIvarList(Class cls, unsigned int *outCount)
获得某个类的所有成员变量(outCount会返回成员变量的总数)

* const char *ivar_getName(Ivar v)
获得成员变量的名字

* const char *ivar_getTypeEncoding(Ivar v)
获得成员变量的类型

* void free(void *)
释放内存(C语言函数名中包含:copy,create,retain,new时)
 

2> <objc/message.h>
* void objc_msgSend(void)
给某个对象发送某个消息

```
